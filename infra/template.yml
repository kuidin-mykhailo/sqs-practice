AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: DefaultEventBus

  TransformQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TransformQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TransformDeadLetterQueue.Arn
        maxReceiveCount: 3

  TransformDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TransformQueue-DeadLetter

  BatchingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: BatchingQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BatchingDeadLetterQueue.Arn
        maxReceiveCount: 3

  BatchingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: BatchingQueue-DeadLetter

  MinuteSchedulerEvent:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(24 hours)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt TransformQueue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: |
          {
            "message": "Hello from Scheduler"
          }

  ErrorSchedulerEvent:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(48 hours)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt TransformQueue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: |
          {
            "message": "Error"
          }

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SchedulerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TransformQueue.Arn

  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/states/${AWS::StackName}-ExpressTransformEventWorkflow"
      RetentionInDays: 14

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt TransformLambda.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${StepFunctionLogGroup.Arn}:log-stream:*"
        - PolicyName: SQSWritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: 
                  - !GetAtt BatchingQueue.Arn
                  - !GetAtt TransformDeadLetterQueue.Arn

  StepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: StandardTransformEventWorkflow
      Role: !GetAtt StepFunctionRole.Arn
      Type: STANDARD
      DefinitionUri: ./state_defenition.asl.json
      DefinitionSubstitutions:
        TransformLambda: !GetAtt TransformLambda.Arn
        BatchingQueueUrl: !Ref BatchingQueue
        TransformDLQUrl: !Ref TransformDeadLetterQueue

  SQSToStepFunctionPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: TransformSQSToStepFunctionPipe
      Source: !GetAtt TransformQueue.Arn
      Target: !GetAtt StepFunction.Arn
      RoleArn: !GetAtt PipeRole.Arn
      TargetParameters:
        StepFunctionStateMachineParameters:
          InvocationType: FIRE_AND_FORGET

  PipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pipes.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:DescribeStateMachine
                Resource: !GetAtt StepFunction.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt TransformQueue.Arn

  TransformLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TransformLambda
      Handler: main.handler
      Runtime: python3.11
      Role: !GetAtt TransformLambdaExecutionRole.Arn
      CodeUri: ../src/transform_lambda/
      Environment:
        Variables:
          SQS_URL: !Ref BatchingQueue
          DLQ_URL: !Ref TransformDeadLetterQueue

  BatchProcessingLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: BatchProcessingLambda
      Handler: main.handler
      Runtime: python3.11
      Role: !GetAtt BatchProcessingLambdaExecutionRole.Arn
      CodeUri: ../src/batch_processing_lambda/
      Environment:
        Variables:
          DYNAMO_TABLE: BatchingTable
          IDEMPOTENCY_TABLE: !Ref IdempotencyTable
      Events:
        BatchingQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt BatchingQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures

  TransformLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  BatchProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt IdempotencyTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt BatchingQueue.Arn

  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: BatchingTable
      PrimaryKey:
        Name: BatchId
        Type: String

  IdempotencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SqsPracticeIdempotencyTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
      BillingMode: PAY_PER_REQUEST